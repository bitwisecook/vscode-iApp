fileTypes:
    - iApp
foldingStartMarker: '\{\s*$'
foldingStopMarker: '^\s*\}'
keyEquivalent: ^~i
name: iApp
patterns:
    -
        begin: '(?<=^|;)\s*((#))'
        beginCaptures:
            '1':
                name: comment.line.number-sign.iapp
            '2':
                name: punctuation.definition.comment.iapp
        contentName: comment.line.number-sign.iapp
        end: \n
        patterns:
            -
                match: (\\\\|\\\n)
    -
        captures:
            '1':
                name: keyword.control.iapp
        match: '(?<=^|[\[{;])\s*(if|while|for|catch|return|break|continue|switch|foreach)\b'
    -
        captures:
            '1':
                name: keyword.other.iapp
        match: \b(after|append|array|binary|clock|concat|eof|encoding|exec|exit|error|eval|expr|fconfigure|flush|format|incr|info|join|lappend|lindex|linsert|list|llength|lrange|lrepeat|lreplace|lsearch|lset|lsort|rename|seek|scan|set|socket|split|string|subst|unset|uplevel|upvar|variable|open|close|puts)\b
    -
        captures:
            '1':
                name: keyword.control.iapp
        match: '(?<=^|})\s*(then|elseif|else)\b'
    -
        captures:
            '1':
                name: keyword.other.iapp
            '2':
                name: entity.name.function.iapp
        match: '^\s*(proc)\s+([^\s]+)'
    -
        captures:
            '1':
                name: keyword.other.iapp
        match: '(?<=^|[\[{;])\s*(start_processing|end_processing|lputs|create_(ltm|gtm|net|sys)_\S+|tmsh::(get_config|list|create|modify|publish|delete|run_proc|log_level|log_dest|stateless|include|pwd)|ag_conf|ag_log_(open|kvps|msg))\b'
    -
        begin: '(?<=^|[\[{;])\s*(regexp|regsub)\b\s*'
        beginCaptures:
            '1':
                name: keyword.other.iapp
        comment: 'special-case regexp/regsub keyword in order to handle the expression'
        end: '[\n;\]]'
        patterns:
            -
                match: '\\(?:.|\n)'
                name: constant.character.escape.iapp
            -
                comment: 'switch for regexp'
                match: '-\w+\s*'
            -
                applyEndPatternLast: 1
                begin: '--'
                comment: 'end of switches'
                end: '\s'
                patterns:
                    - {include: '#regexp'}
            -
                include: '#regexp'
    -
        include: '#escape'
    -
        include: '#variable'
    -
        include: '#operator'
    -
        include: '#numeric'
    -
        begin: '"'
        beginCaptures:
            '0':
                name: punctuation.definition.string.begin.iapp
        end: '"'
        endCaptures:
            '0':
                name: punctuation.definition.string.end.iapp
        name: string.quoted.double.iapp
        patterns:
            -
                include: '#escape'
            -
                include: '#variable'
            -
                include: '#embedded'
repository:
    bare-string:
        begin: '(?:^|(?<=\s))"'
        comment: 'matches a single quote-enclosed word without scoping'
        end: '"([^\s\]]*)'
        endCaptures:
            '1':
                name: invalid.illegal.iapp
        patterns:
            -
                include: '#escape'
            -
                include: '#variable'
    braces:
        begin: '(?:^|(?<=\s))\{'
        comment: 'matches a single brace-enclosed word'
        end: '\}([^\s\]]*)'
        endCaptures:
            '1':
                name: invalid.illegal.iapp
        patterns:
            -
                match: '\\[{}\n]'
                name: constant.character.escape.iapp
            -
                include: '#inner-braces'
    embedded:
        begin: '\['
        beginCaptures:
            '0':
                name: punctuation.section.embedded.begin.iapp
        end: '\]'
        endCaptures:
            '0':
                name: punctuation.section.embedded.end.iapp
        name: source.iapp.embedded
        patterns:
            -
                include: source.iapp
    escape:
        match: '\\(\d{1,3}|x[a-fA-F0-9]+|u[a-fA-F0-9]{1,4}|.|\n)'
        name: constant.character.escape.iapp
    inner-braces:
        begin: '\{'
        comment: 'matches a nested brace in a brace-enclosed word'
        end: '\}'
        patterns:
            -
                match: '\\[{}\n]'
                name: constant.character.escape.iapp
            -
                include: '#inner-braces'
    regexp:
        begin: '(?=\S)(?![\n;\]])'
        comment: 'matches a single word, named as a regexp, then swallows the rest of the command'
        end: '(?=[\n;\]])'
        patterns:
            -
                begin: '(?=[^ \t\n;])'
                end: '(?=[ \t\n;])'
                name: string.regexp.iapp
                patterns:
                    - {include: '#braces'}
                    - {include: '#bare-string'}
                    - {include: '#escape'}
                    - {include: '#variable'}
                    - {include: '#string'}
            -
                begin: '[ \t]'
                comment: 'swallow the rest of the command'
                end: '(?=[\n;\]])'
                patterns:
                    - {include: '#variable'}
                    - {include: '#embedded'}
                    - {include: '#escape'}
                    - {include: '#braces'}
                    - {include: '#inner-braces'}
    string:
        applyEndPatternLast: 1
        begin: '(?:^|(?<=\s))(?=")'
        comment: 'matches a single quote-enclosed word with scoping'
        end: ""
        name: string.quoted.double.iapp
        patterns:
            -
                include: '#bare-string'
    variable:
        captures:
            '1':
                name: punctuation.definition.variable.iapp
        match: '(\$)((?:[a-zA-Z0-9_]|::)+(\([^\)]+\))?|\{[^\}]*\})'
        name: variable.other.iapp
    numeric:
        match: '(?<![a-zA-Z])([0-7][0-7][0-7]|0x[0-9a-fA-F]|[+-]?([0-9]*[.])?[0-9]+f?)(?![\.a-zA-Z])'
        name: constant.numeric.iapp
    operator:
        match: '(?<= |\d)(-|\+|~|&{1,2}|\|{1,2}|<{1,2}|>{1,2}|\*{1,2}|!|%|\/|<=|>=|={1,2}|!=|\^)(?= |\d)'
        name: keyword.operator.iapp
scopeName: source.iapp
uuid: fdb5515a-28d8-4010-8075-eb2b8a27c8c1
