fileTypes:
  - implementation
  - iapp
  - tcl
scopeName: source.iapp
foldingStartMarker: '([{(\[])'
foldingEndMarker: '([})\]])'
name: iApp Implementation
patterns:
  -
    include: '#root'
repository:
  root:
    patterns:
      -
        include: '#invariant'
      -
        include: '#brackets'
      -
        include: '#proc-call'
  invariant:
    patterns:
      -
        include: '#ignore-long-lines'
      -
        include: '#no-starting-empty-brackets'
      -
        include: '#no-empty-square-brackets'
  no-starting-empty-brackets:
    patterns:
      -
        match: '(?<=^)\s*+(\{\}|\[\])'
        captures:
          '1':
            name: invalid.illegal.termination.iapp
  no-empty-square-brackets:
    patterns:
      -
        match: '(\[\])'
        captures:
          '1':
            name: string.empty.square.brace
  brackets:
    patterns:
      -
        include: '#invariant'
      -
        include: '#special-brackets'
      -
        include: '#empty-brackets'
      -
        include: '#square-brackets'
      -
        include: '#curly-brackets'
  square-brackets:
    patterns:
      -
        begin: '\s*+(?<!\\)(\[)'
        end: '(?<!\\)(\])'
        beginCaptures:
          '1':
            name: meta.brace.square.open.iapp
        endCaptures:
          '1':
            name: meta.brace.square.close.iapp
        patterns:
          -
            include: '#line-escape'
          -
            include: '#invariant'
          -
            include: '#proc-call'
  curly-brackets:
    patterns:
      -
        begin: '\s*+({)'
        end: '(})'
        name: meta.curly.enclosed
        beginCaptures:
          '1':
            name: meta.brace.curly.open.iapp
        endCaptures:
          '1':
            name: meta.brace.curly.close.iapp
        patterns:
          -
            include: '#invariant'
          -
            include: '#special-brackets'
          -
            include: '#curly-brackets'
          -
            include: '#proc-call'
  curly-string-brackets:
    patterns:
      -
        include: '#empty-brackets'
      -
        begin: '\s*+({)'
        end: '(})'
        name: meta.curly.enclosed
        contentName: string.quote.bracketed.nosubstitution.iapp
        beginCaptures:
          '1':
            name: meta.brace.curly.open.iapp
        endCaptures:
          '1':
            name: meta.brace.curly.close.iapp
          '2':
            name: invalid.illegal.charafterbrace.iapp
        patterns:
          -
            match: '([\[\]])'
            name: string
          -
            include: '#variable-non-substituting'
          -
            include: '#curly-string-brackets'
          -
            include: '#quoted-string'
          -
            include: '#bare-string'
  empty-brackets:
    patterns:
      -
        match: '\s*+(?={)({})'
        captures:
          '1':
            name: punctuation.definition.string.brackets.iapp
      -
        comment: 'enclosed brackets'
        match: '\s*+{([{}]*)}'
        captures:
          '1':
            name: punctuation.definition.string.brackets.iapp
  special-brackets:
    comment: 'Support for special cases that brackets may be used'
    patterns:
      -
        comment: 'Need to handle the case that we have {*}$varname'
        include: '#variable'
  expression-brackets:
    patterns:
      -
        comment: 'Expressions utilize special syntax highlighting'
        begin: '(\{)'
        end: '(\})'
        beginCaptures:
          '1':
            name: meta.expression.start.iapp
        endCaptures:
          '1':
            name: meta.expression.end.iapp
        patterns:
          -
            include: '#empty-brackets'
          -
            include: '#curly-string-brackets'
          -
            include: '#square-brackets'
          -
            include: '#expressions'
  proc-call:
    comment: 'handles a proc call'
    patterns:
      -
        include: '#invariant'
      -
        include: '#comment-blocks'
      -
        include: '#variable'
      -
        include: '#quoted-string'
      -
        include: '#keywords'
      -
        include: '#proc-call-args'
  proc-call-args:
    comment: 'Arguments given to a proc that is being called'
    patterns:
      -
        include: '#special-brackets'
      -
        include: '#brackets'
      -
        include: '#line-escape'
      -
        include: '#opt'
      -
        include: '#quoted-string'
      -
        include: '#variable'
      -
        include: '#constant-numeric'
      -
        include: '#bare-string'
      -
        begin: '(?=::)'
        end: "\\s|(?=[\\]};\\n])"
        patterns:
          -
            include: '#namespace-name'
  keywords:
    patterns:
      -
        include: '#square-brackets'
      -
        include: '#iapp-subst'
      -
        include: '#variable'
      -
        include: '#iapp-proc'
      -
        include: '#iapp-binary'
      -
        include: '#iapp-string'
      -
        include: '#iapp-switch'
      -
        include: '#iapp-info'
      -
        include: '#iapp-json'
      -
        include: '#iapp-incr'
      -
        include: '#iapp-interp'
      -
        include: '#iapp-setters'
      -
        include: '#iapp-expression-keywords'
      -
        include: '#iapp-foreach'
      -
        include: '#iapp-namespace'
      -
        include: '#regexp'
      -
        include: '#iapp-array'
      -
        include: '#iapp-catch'
      -
        include: '#iapp-ns-commands'
      -
        include: '#iapp-puts'
      -
        include: '#iapp-upvar'
      -
        include: '#iapp-global'
      -
        include: '#iapp-vwait'
      -
        include: '#iapp-entity-commands'
      -
        include: '#iapp-core-commands'
      - 
        include: '#iapp-commands'
      -
        match: "(?:(?<=^|[\\[{;])\\s*|(?<=::)(?![\\s\"]))([^\\s}\\]{\\[;\\\\\"]*)(?=$|{}|[\\s\\n\\]}\\[;])"
        captures:
          '1':
            patterns:
              -
                include: '#namespace-name'
  iapp-core-commands:
    patterns:
      -
        comment: 'imports & requires'
        begin: '(?<=^|\[|{|;)\s*(::)?\b(package|include|includes)\b'
        end: "(?=(?<!\\\\)(?:$|[\\n;}\\]]))"
        captures:
          '1':
            name: support.type.ns.separator
          '2':
            name: keyword.control.import.package.iapp
          '3':
            name: support.type.ns.separator
        patterns:
          -
            begin: "(?<=package)\\s*(require|provide)\\s*(?!$|\\n)"
            end: "(?=(?<!\\\\)(?:$|[\\n;}\\]]))"
            captures:
              '1':
                name: keyword.control.package.require.iapp
            patterns:
              -
                include: '#line-escape'
              -
                include: '#constant-numeric'
              -
                include: '#variable'
              -
                include: '#namespace-name'
          -
            begin: '(?<=include|includes)'
            end: "(?=(?<!\\\\)(?:$|[\\n;}\\]]))"
            contentName: string
      -
        include: regexp
      -
        begin: '(?<=^|\[|{|;)\s*(::)?\b(format|scan)\b'
        end: "(?=(?<!\\\\)(?:$|[\\n\\]};]))"
        captures:
          '1':
            name: support.type
          '2':
            name: keyword.control.format.iapp
        patterns:
          -
            include: '#line-escape'
          -
            include: '#square-brackets'
          -
            include: '#variable'
          -
            include: '#quoted-string'
          -
            include: '#constant-numeric'
          -
            match: '(%)([.])?([0-9]*)?([.duioxXcsfegG])'
            captures:
              '1':
                name: support.type.iapp
              '2':
                name: meta.class
              '3':
                name: meta.constant.iapp
              '4':
                name: entity.function.name.iapp
          -
            match: "(?<=\\s)\\s*(?![%.$])([^\\s\\]}\\[{;\\n]*)"
            captures:
              '1':
                name: variable
                patterns:
                  -
                    include: '#variable-bare-italic'
          -
            include: '#format-brackets'
      -
        match: '(?:(?<=^|\[|{|;)\s*(::)?|(?<=::))\b(try|apply|exit|flush|chan|lreverse|error|gets|for|lrepeat|lsearch|fconfigure|chan|open|close|next|while|format|lindex|linsert|concat|lsort|glob|tuapi|subst|upvar|uplevel|fileutil|continue|cluster|break|yield|load|split|switch|yieldto|catch|source|cd|file|wget|join|throw|lrange|lset|lmap|lassign|llength|lwhere|list|return|puts|clock|state|variable|after|task|return|json|interp)\b(::)?'
        name: keyword.control.iapp
        captures:
          '1':
            name: support.type.ns.separator
          '2':
            name: keyword.control.iapp
          '3':
            name: support.type.ns.separator
  format-brackets:
    patterns:
      -
        begin: '\s*({)'
        end: '(})'
        contentName: string.format.contents.iapp
        patterns:
          -
            include: '#variable-non-substituting'
          -
            include: '#format-brackets'
          -
            include: '#empty-brackets'
          -
            match: '([#0-9+-])([duioxXcsfegG]?)'
            captures:
              '1':
                name: meta.constant
              '2':
                name: support.type
          -
            match: '\s*+(%)([.duioxXcsfegG])'
            captures:
              '1':
                name: support.type.iapp
              '2':
                name: entity.function.name.iapp
          -
            match: '([;])'
            name: string
          -
            include: '#constant-numeric'
  regular-expression:
    patterns:
      -
        match: "(?<!\\\\)(\\#.*)(?=\\n|$)"
        name: comment
      -
        match: '(\.)([?+*])'
        captures:
          '1':
            name: support.type.re.anychar.iapp
          '2':
            name: variable.re.modifier.iapp
      -
        match: '(?<={|^)\s*(\^)'
        name: meta.class.re.start.iapp
      -
        match: "(?<!\\\\)(\\$)(?=\\s*}|\\n)"
        name: meta.class.re.end.iapp
      -
        match: '(\\)(?=\s*})'
        name: invalid.illegal.re.iapp
      -
        match: '(?<!\\)(\|)'
        name: meta.constant.re.or.iapp
      -
        comment: 'the character whose value is 0'
        match: '(?<!\\)(\\)0[^0-9a-fA-F]'
        captures:
          '1':
            name: support.type.re.escape.iapp
          '2':
            name: support.type.re.escaped.value.iapp
      -
        comment: '(where X is any character) the character whose low-order 5 bits are the same as those of X, and whose other bits are all zero'
        match: '(?<!\\)(\\)(c)(.)'
        captures:
          '1':
            name: support.type.re.escape.iapp
          '2':
            name: support.type.re.escaped.value.iapp
          '3':
            name: entity.function.name.re.unicode.punctuation.italic.iapp
      -
        comment: '(up to four hexadecimal digits) the Unicode character U+wxyz'
        match: '(?<!\\)(\\)(u)([0-9a-fA-F]{1,4})'
        captures:
          '1':
            name: support.type.re.escape.iapp
          '2':
            name: support.type.re.escaped.value.iapp
          '3':
            name: entity.function.name.re.unicode.punctuation.italic.iapp
      -
        comment: 'reserved for a Unicode extension up to 21 bits. The digits are parsed until the first non-hexadecimal character is encountered, the maximun of eight hexadecimal digits are reached, or an overflow would occur in the maximum value of U+10ffff.'
        match: '(?<!\\)(\\)(U)([0-9a-fA-F]{1,8})'
        captures:
          '1':
            name: support.type.re.escape.iapp
          '2':
            name: support.type.re.escaped.value.iapp
          '3':
            name: entity.function.name.re.unicode.punctuation.italic.iapp
      -
        comment: '(where hh is one or two hexadecimal digits) the character whose hexadecimal value is 0xhh'
        match: '(?<!\\)(\\)(x)([0-9a-fA-F]{1,2})'
        captures:
          '1':
            name: support.type.re.escape.iapp
          '2':
            name: support.type.re.escaped.value.iapp
          '3':
            name: entity.function.name.re.unicode.punctuation.italic.iapp
      -
        comment: 'the character whose octal value is 0xy?z?. The first digit must be in the range 0-3, otherwise the two-digit form is assumed.'
        match: '(?<!\\)(\\)([0-3][0-7]{2}|[0-7]{2})'
        captures:
          '1':
            name: support.type.re.escape.iapp
          '2':
            name: support.type.re.escaped.value.iapp
          '3':
            name: entity.function.name.re.unicode.punctuation.italic.iapp
      -
        match: '(?<!\\)(\\)([1-9][0-9]?[0-9]?)'
        captures:
          '1':
            name: support.type.re.escape.iapp
          '2':
            name: meta.constant.numeric.iapp
      -
        match: '(?<!\\)(\\)([abBefnrtv0dswDSWAmMyYZ])?'
        captures:
          '1':
            name: support.type.re.escape.iapp
          '2':
            name: support.type.re.escaped.value.iapp
      -
        begin: '(?<!\\)(\()(\?[!:=])'
        end: '(?<!\\)(\))'
        beginCaptures:
          '1':
            name: meta.constant.re.lookahead.close.punctuation.italic.iapp
          '2':
            name: meta.class.re.lookahead.type.iapp
        endCaptures:
          '1':
            name: meta.constant.re.lookahead.close.punctuation.italic.iapp
        patterns:
          -
            include: '#regular-expression'
      -
        begin: '(?<!\\)(\()(\?)(?![!:=\)])'
        end: '(?<!\\)(\))'
        contentName: entity.function.name.punctuation.italic.underline.re.meta.flags.iapp
        beginCaptures:
          '1':
            name: meta.constant.re.lookahead.open.punctuation.italic.iapp
          '2':
            name: keyword.control.re.meta.iapp
        endCaptures:
          '1':
            name: meta.constant.re.lookahead.close.punctuation.italic.iapp
      -
        begin: '(?<!\\)(\[)(\^)?'
        end: '(?<!\\)([\]])([*?+]([?+]?))?'
        beginCaptures:
          '1':
            name: meta.constant.re.lookahead.close.punctuation.italic.iapp
          '2':
            name: meta.variable.re.negate.chars.iapp
        endCaptures:
          '1':
            name: meta.constant.re.lookahead.close.punctuation.italic.iapp
          '2':
            name: variable.re.modifier.iapp
          '3':
            name: support.type.re.nongreedy.punctuation.italic.iapp
        contentName: meta.class
        patterns:
          -
            match: '(?<!\\)(\\)(.)'
            captures:
              '1':
                name: support.type.re.escape.iapp
              '2':
                name: meta.class
          -
            begin: '(?<!-)(\[[:=])'
            end: '([:=]\])(?!-)'
            beginCaptures:
              '1':
                name: entity.function.name.re.bracket.expression.open.punctuation.italic.iapp
            endCaptures:
              '1':
                name: entity.function.name.re.bracket.expression.close.punctuation.italic.iapp
            patterns:
              -
                match: '([^:=\]]*)(?=[:=]\])'
                name: support.type.punctuation.italic.iapp
          -
            match: '(\\)([abBefnrtv0dsw])'
            captures:
              '1':
                name: support.type.re.escape.iapp
              '2':
                name: support.type.re.escaped.value.iapp
          -
            match: '(?<!(?<!\\)\\)(-)'
            name: entity.function.name
      -
        begin: '(?<!\\)(\()'
        end: '(?<!\\)(\))'
        beginCaptures:
          '1':
            name: keyword.control
        endCaptures:
          '1':
            name: keyword.control
        patterns:
          -
            include: '#regular-expression'
      -
        match: '(?<!\\)({([0-9]*)(\,)?([0-9]*)?})'
        captures:
          '1':
            name: entity.function.name
          '2':
            name: meta.constant.re.number.iapp
          '3':
            name: support.type.re.expand.iapp
          '4':
            name: meta.constant.re.number.iapp
      -
        match: '(?:(?<!\\\.)(?<=\.))(?<=\.|\])((?<!\\)[*?+])'
        name: meta.constant.re.iapp
      -
        match: '(?<=\*|\+)((?<!\\)[*?+])'
        name: support.type.re.iapp
      -
        match: '(?<!\\)(\*)'
        name: variable.re.modifier.iapp
      -
        match: '((?<!\\)[.?^!$+])'
        name: variable.re.modifier.iapp
      -
        match: '(?<=\.)((?<!\\)[*?])'
        name: variable.re.modifier.iapp
  expressions:
    patterns:
      -
        include: '#variable'
      -
        include: '#curly-string-brackets'
      -
        include: '#square-brackets'
      -
        include: '#expression-functions'
      -
        include: '#constant-numeric'
      -
        include: '#expression-operators'
      -
        comment: order-of-operations
        begin: (\()
        end: '\s*(\))'
        beginCaptures:
          '1':
            name: entity.function.name.expression.brace.ooo.open.iapp
        endCaptures:
          '1':
            name: entity.function.name.expression.brace.ooo.close.iapp
        patterns:
          -
            include: '#expressions'
      -
        include: '#quoted-string'
  constant-numeric:
    patterns:
      -
        match: '\s*+((?:#?|\.)?(?:\B[-+])?(?:\b0[bB][0-1]*|\b0[oO][0-7]*|\b(0([xX]))[0-9a-fA-F]*|(\B\.[0-9]+|\b[0-9]+(\.[0-9]*)?)([eE][-+]?[0-9]+)?))'
        captures:
          '1':
            name: meta.constant.numeric
          '2':
            name: punctuation.italic
          '3':
            name: support.type
      -
        match: '\s*+\b(true|false|bool|entier|integer|float|null)\b'
        name: meta.constant.punctuation.italic
  expression-operators:
    patterns:
      -
        comment: 'expression word operators'
        match: \b(in|ni|eq|ne)\b
        name: support.type.operator.punctuation.italic.iapp
      -
        comment: 'expression operators'
        match: '(=|\+|-|\*|/|%)'
        name: support.type.operator.iapp
      -
        comment: 'expression comparisons'
        match: '([<>])'
        name: support.type.expression.operator.iapp
      -
        comment: 'expression bitwise'
        match: '([|^&!~])'
        name: support.type.expression.operator.iapp
      -
        comment: 'expression ternary'
        match: '([?:])'
        name: support.type.expression.operator.iapp
  expression-functions:
    patterns:
      -
        begin: \b(abs|acos|asin|atan|atan2|ceil|cos|cosh|double|exp|floor|fmod|hypot|int|log|log10|pow|rand|round|sin|sinh|sqrt|srand|tan|tanh|wide|)\b(\()
        end: (\))
        beginCaptures:
          '1':
            name: entity.function.name.math.function.punctuatio.italic.iapp
          '2':
            name: entity.function.name.math.function.brace.open.iapp
        endCaptures:
          '1':
            name: entity.function.name.math.function.brace.close.iapp
        patterns:
          -
            include: '#expressions'
  iapp-vwait:
    patterns:
      -
        include: '#line-escape'
      -
        comment: 'vwait varName'
        begin: "(?<=^|\\[|{|;)\\s*(::)?\\b(vwait)\\b\\s*+(?!$|\\n|;|^|\\]|})"
        end: "(?=$|\\n|;|\\]|}|\\s)\\s*([^$\\n^\\];}\\[\\\\]*)?(\\\\(?!\\n))?"
        beginCaptures:
          '1':
            name: support.type.ns.iapp
          '2':
            name: keyword.control.vwait.iapp
        endCaptures:
          '1':
            name: invalid.illegal.numargs.iapp
          '2':
            name: invalid.illegal.escape.iapp
        patterns:
          -
            include: '#line-escape'
          -
            include: '#variable'
          -
            include: '#variable-bare-italic'
  iapp-proc:
    patterns:
      -
        begin: "(?<=^|[\\[{;])\\s*(::)?\\b(proc)\\b\\s+([^\\s\\n]+)\\s+(?={|\\b|\\[|\\\\$)"
        end: '(?=(?<!\\)$)'
        beginCaptures:
          '1':
            name: support.type
          '2':
            name: keyword.control.proc.iapp
          '3':
            patterns:
              -
                include: '#variable'
              -
                include: '#brackets'
              -
                include: '#namespace-name'
        patterns:
          -
            include: '#proc-arguments'
          -
            include: '#brackets'
  iapp-subst:
    patterns:
      -
        begin: '(?<=^|[\[{;])\s*((?:::)?\bsubst\b)(?!\s*$)'
        end: '(?=(?<!\\)(?:$|[;\]}]))|(?<=})'
        beginCaptures:
          '1':
            name: keyword.control.subst.iapp
            patterns:
              -
                include: '#namespace-separator'
        patterns:
          -
            begin: '(?<=subst)\b((?:\s+(?:-nobackslashes|-nocommands|-novariables))?)(?!\s*$)'
            end: '(?=(?<!\\)(?:$|[;\]}]))|(?<=})'
            beginCaptures:
              '1':
                patterns:
                  -
                    include: '#opt'
            patterns:
              -
                include: '#proc-call-args'
  iapp-binary:
    patterns:
      -
        begin: "(?<=^|\\[|{|;)\\s*(::)?\\b(binary)\\b\\s+(?!\\n)([^\\s\\[{;\\n\\]]*)"
        end: "\\s*(?=$|\\n|\\]|;|})"
        beginCaptures:
          '1':
            name: support.type
          '2':
            name: keyword.control.throw.iapp
          '3':
            name: entity.function.name.binary.iapp
            patterns:
              -
                include: '#variable'
        patterns:
          -
            include: '#line-escape'
          -
            begin: "(?<=scan|format)\\s+(?!\\n)"
            end: "(?=(?<!\\\\)(?:$|[\\n\\]};]))"
            patterns:
              -
                include: '#line-escape'
              -
                include: '#variable'
              -
                include: '#glob-match'
          -
            include: '#proc-call-args'
  iapp-switch:
    patterns:
      -
        begin: '(?<=^|\[|{|;)\s*(::)?\b(switch)\b'
        end: '(?=(?<!\\)(?:$|[;\]}]))|(?<=})'
        beginCaptures:
          '1':
            name: support.type
          '2':
            name: keyword.control.switch.iapp
          '3':
            name: entity.function.name.state.iapp
        patterns:
          -
            begin: "(?<=switch)\\b(\\s+(?!$)(?:(?:-|\\$)[^\\s\\n]*\\s+|\\[[^\\]\\n]*(?=\\]))*+)(?!\\s*{|\\[|\\s*$)"
            end: '(?=(?<!\\)(?:$|[;\]}]))'
            beginCaptures:
              '1':
                patterns:
                  -
                    include: '#line-escape'
                  -
                    include: '#opt'
                  -
                    include: '#double-dash'
                  -
                    include: '#variable'
                  -
                    include: '#square-brackets'
            patterns:
              -
                include: '#line-escape'
              -
                include: '#variable'
              -
                match: (default)
                name: keyword.control.default.switch.unbraced.iapp
              -
                include: '#brackets'
              -
                include: '#bare-string'
          -
            begin: "(?<=switch)\\b(\\s+(?!$)(?:(?:-|\\$)[^\\s]*\\s+|\\[[^\\]\\n]*(?=\\]))*+)(?=\\s*{)"
            end: '(?=(?<!\\)(?:$|[;\]}]))|(?<=})'
            beginCaptures:
              '1':
                patterns:
                  -
                    include: '#line-escape'
                  -
                    include: '#opt'
                  -
                    include: '#double-dash'
                  -
                    include: '#variable'
                  -
                    include: '#square-brackets'
            patterns:
              -
                include: '#line-escape'
              -
                include: '#variable'
              -
                begin: '\s*+({)'
                end: '(})'
                beginCaptures:
                  '1':
                    name: meta.brace.switch.open.iapp
                endCaptures:
                  '1':
                    name: meta.brace.switch.close.iapp
                patterns:
                  -
                    include: '#variable-non-substituting'
                  -
                    include: '#empty-brackets'
                  -
                    match: '\s?(-)\s'
                    name: meta.constant.switch.next.iapp
                  -
                    match: '\s*\b(default)\b\s+(?={)'
                    name: keyword.control.punctuation.italic.iapp
                  -
                    include: '#brackets'
                  -
                    include: '#glob-match'
                  -
                    include: '#bare-string'
              -
                match: (default)
                name: keyword.control.default.switch.unbraced.iapp
              -
                include: '#brackets'
              -
                include: '#bare-string'
          -
            begin: "(?<=switch)\\b(\\s+(?!$)(?:(?!(?<!\\\\)$)(?:-|\\$)[^\\s]*(?:(?!\\s*$)\\s+)?|\\[[^\\]\\n]*(?=\\]))*+)"
            end: '(?=(?<!\\)(?:$|[;\]}]))|(?<=})'
            beginCaptures:
              '1':
                patterns:
                  -
                    include: '#line-escape'
                  -
                    include: '#opt'
                  -
                    include: '#double-dash'
                  -
                    include: '#variable'
                  -
                    include: '#square-brackets'
            patterns:
              -
                include: '#line-escape'
              -
                include: '#variable'
              -
                match: (default)
                name: keyword.control.default.switch.unbraced.iapp
              -
                include: '#brackets'
              -
                include: '#bare-string'
  iapp-puts:
    patterns:
      -
        begin: '(?<=^|\[|{|;)\s*\b(puts)\b'
        end: "(?=$|\\n|}|\\]|;)"
        beginCaptures:
          '1':
            name: keyword.control.puts.iapp
        patterns:
          -
            include: '#line-escape'
          -
            include: '#opt'
          -
            match: "(?:(?<=puts)|^|(?<=-nonewline))\\s*+(?!\\n|$)([^\\s$\\n;}\\]\\[{\"]*+)(?!\\s*(?:$|\\n|}|\\]|;|^))"
            name: support.type.puts.channel.punctuation.italic.iapp
          -
            include: '#square-brackets'
          -
            include: '#curly-string-brackets'
          -
            include: '#quoted-string'
          -
            include: '#bare-string'
  iapp-global:
    patterns:
      -
        begin: '(?<=^|{|\[|;)\s*\b(global)\b'
        end: "(?=$|\\n|\\]|}|;)"
        captures:
          '1':
            name: keyword.control.global.iapp
        patterns:
          -
            include: '#variable-bare-italic'
  iapp-class-name:
    patterns:
      -
        include: '#line-escape'
      -
        include: '#variable'
      -
        include: '#namespace-separator'
      -
        include: '#square-brackets'
      -
        match: '(?:(?=\s)\s*)?(\w+)'
        name: meta.class
  iapp-incr:
    patterns:
      -
        begin: '(?<=^|\[|{|;)\s*(::)?\b(incr)\b'
        end: "\\s*(?=$|\\n|}|\\]|;)"
        beginCaptures:
          '1':
            name: support.type
          '2':
            name: keyword.control.incr.iapp
        patterns:
          -
            include: '#line-escape'
          -
            include: '#constant-numeric'
          -
            include: '#brackets'
          -
            include: '#variable'
          -
            include: '#variable-bare-italic'
  iapp-lassign:
    patterns:
      -
        begin: '(?<=^|\[|{|;)\s*(::)?\b(lassign)\b'
        end: "\\s*(?=$|\\n|\\]|})"
        beginCaptures:
          '1':
            name: support.type
          '2':
            name: keyword.control.lassign.iapp
        patterns:
          -
            include: '#line-escape'
          -
            include: '#brackets'
          -
            include: '#variable'
          -
            include: '#variable-bare-italic'
  iapp-entity-commands:
    patterns:
      -
        begin: '\s*(::)?\b(tailcall)\b'
        end: "(?=(?<!\\\\)(?:$|[\\n;\\]}]))"
        captures:
          '1':
            name: support.type.ns.separator.iapp
          '2':
            name: keyword.control.tailcall.iapp
        patterns:
          -
            include: '#line-escape'
          -
            include: '#proc-call'
          -
            include: '#namespace-name'
      -
        begin: '(?<=^|[\[{;])\s*(::)?\b(info|eof|read|fileevent|fblocked|flush|gets|chan|coroutine|eval|tls|http|clock|array|encoding|binary|file|task|after|rename|callback|state|json|exec|pubsub)\b'
        end: "(?=(?<!\\\\)(?:$|[\\n;\\]}]))"
        beginCaptures:
          '1':
            name: support.type
          '2':
            name: keyword.control.ent.iapp
        patterns:
          -
            include: '#line-escape'
          -
            include: '#opt'
          -
            match: "(?<=(?:info|clock|http|binary|coroutine|chan|encoding|file|task|array|after|rename|callback|state|json|exec|pubsub))\\s+(?:(?!$|{|\\[|;|\\n)([^\\s\\]}\\[{;\\n\"]*))?"
            captures:
              '1':
                patterns:
                  -
                    include: '#variable'
                  -
                    include: '#constant-numeric'
                  -
                    include: '#opt'
                  -
                    include: '#namespace-name'
          -
            include: '#proc-call-args'
  iapp-array:
    patterns:
      -
        include: '#namespace-separator'
      -
        begin: '(?<=^|[\[{;]\s)\s*(?:::)?(array\b)'
        end: "(?=(?<!\\\\)(?:$|[\\n;\\]}]))"
        beginCaptures:
          '1':
            name: keyword.control.array.iapp
        patterns:
          -
            include: '#iapp-array-set'
          -
            include: '#iapp-array-get'
          -
            include: '#iapp-array-commands'
  iapp-array-commands:
    patterns:
      -
        begin: '(?<=array)(?:::)?\s+(names|donesearch|anymore|exists|nextelement|size|startsearch|statistics|unset)\b'
        end: "(?=(?<!\\\\)(?:$|[\\n;\\]}]))"
        beginCaptures:
          '1':
            name: entity.function.name.array.command.iapp
        patterns:
          -
            include: '#proc-call-args'
  iapp-array-set:
    patterns:
      -
        begin: '(?<=array)(?:::)?\s+(set)\b'
        end: "(?=(?<!\\\\)(?:$|[\\n;\\]}]))"
        beginCaptures:
          '1':
            name: entity.function.name.array.set.iapp
        patterns:
          -
            begin: "(?<=set)\\s+(?!$|[\\n;}\\]])([^\\s\\];]*)"
            end: "(?=(?<!\\\\)(?:$|[\\n;\\]}]))"
            beginCaptures:
              '1':
                patterns:
                  -
                    include: '#variable'
                  -
                    include: '#variable-bare'
            patterns:
              -
                include: '#empty-brackets'
              -
                include: '#property-list-brackets'
              -
                include: '#proc-call-args'
  iapp-array-get:
    patterns:
      -
        begin: '(?<=array)(?:::)?\s+(get)\b'
        end: "(?=(?<!\\\\)(?:$|[\\n;\\]}]))"
        beginCaptures:
          '1':
            name: entity.function.name.array.get.iapp
        patterns:
          -
            begin: "(?<=get)(\\s+(?!$|[\\n;\\]])[^\\s\\]};\\n]*)"
            end: "(?=(?<!\\\\)(?:$|[\\n;\\]}]))"
            captures:
              '1':
                patterns:
                  -
                    include: '#variable-bare'
            patterns:
              -
                include: '#proc-call-args'
  iapp-expression-keywords:
    patterns:
      -
        applyEndPatternLast: 1
        begin: '\s*+((::|-)?(if|expr|while))\b\s+(?={)'
        end: '(?<=})'
        beginCaptures:
          '1':
            name: keyword.control.if.iapp
            patterns:
              -
                include: '#namespace-separator'
              -
                include: '#opt'
          '2':
            name: support.type
          '3':
            name: keyword.control.if.iapp
        endCaptures:
          '1':
            name: keyword.control.if.end.iapp
        patterns:
          -
            include: '#if-handlers'
      -
        begin: '(?<=^|\[|{|;)\s*(::|-)?(expr)\b'
        end: '(?=$|;|}|\])'
        beginCaptures:
          '1':
            name: support.type.expr.ns.iapp
          '2':
            name: keyword.control.expr.unbraced.iapp
        patterns:
          -
            include: '#line-escape'
          -
            include: '#expressions'
  if-handlers:
    patterns:
      -
        include: '#expression-brackets'
      -
        include: '#if-else-if'
      -
        include: '#if-else'
      -
        include: '#curly-brackets'
  if-else-if:
    patterns:
      -
        begin: '(?<=\})\s+(elseif)\s+'
        end: '\s*'
        beginCaptures:
          '1':
            name: keyword.control.elseif.iapp
        patterns:
          -
            include: '#expression-brackets'
          -
            include: '#brackets'
  if-else:
    patterns:
      -
        begin: '(?<=\})\s+(else)\s+(?=\{)'
        end: '(?<=\}|$)'
        beginCaptures:
          '1':
            name: keyword.control.else.iapp
        patterns:
          -
            include: '#brackets'
  if-block:
    patterns:
      -
        applyEndPatternLast: 1
        begin: '(?<=\})\s+(\{)'
        end: '(\})'
        beginCaptures:
          '1':
            name: keyword.control
        patterns:
          -
            include: $self
  iapp-setters:
    patterns:
      -
        include: '#iapp-set'
      -
        include: '#iapp-unset'
      -
        include: '#iapp-append'
  iapp-set:
    patterns:
      -
        begin: "(?<=^|[\\[{;])\\s*(::)?\\b(set|variable)\\b\\s+(?!\\n|$)"
        end: '(?=(?<!\\)(?:$|[;\]}]))'
        beginCaptures:
          '1':
            name: support.type
          '2':
            name: keyword.control.set.iapp
        patterns:
          -
            include: '#line-escape'
          -
            include: '#variable'
          -
            include: '#variable-bare'
          -
            include: '#regexp'
          -
            include: '#proc-call-args'
  iapp-append:
    patterns:
      -
        begin: '(?<=^|[\[{;])\s*(::)?\b(append|lappend)\b(?:(\s+[^\s]*))?'
        end: '(?=$|^|;|}|\])'
        beginCaptures:
          '1':
            name: support.type
          '2':
            name: keyword.control.set.iapp
          '3':
            patterns:
              -
                include: '#variable-bare-italic'
              -
                include: '#variable'
        patterns:
          -
            include: '#proc-call-args'
  iapp-unset:
    patterns:
      -
        contentName: punctuation.variable.set.italic.iapp
        begin: '(?<=^|\[|{|;)\s*(::)?\b(unset)'
        end: "\\s*(?=$|;|\\n|}|\\])"
        beginCaptures:
          '1':
            name: support.type
          '2':
            name: keyword.control.unset.iapp
        patterns:
          -
            include: '#line-escape'
          -
            include: '#opt'
          -
            include: '#brackets'
          -
            match: '\s*([^\s|}|\]|;]*)'
            captures:
              '1':
                name: punctuation.variable.set.italic.iapp
  iapp-namespace:
    patterns:
      -
        begin: '(?<=^|[{\[;])\s*(::)?\b(namespace)\b'
        end: '(?=(?<!\\)$)|(?=[\];}])'
        beginCaptures:
          '1':
            name: support.type
          '2':
            name: keyword.control.namespace.iapp
        patterns:
          -
            include: '#line-escape'
          -
            include: '#iapp-namespace-eval'
          -
            include: '#iapp-namespace-entity-commands'
          -
            include: '#iapp-namespace-subcommands'
          -
            include: '#proc-call-args'
  iapp-namespace-eval:
    begin: '\s*\b(eval|exists)\b\s*'
    end: "(?=(?<!\\\\\n)$|(?<!\\\\)\\n|[}\\];{\\[])"
    beginCaptures:
      '1':
        name: keyword.control.namespace.eval.iapp
    patterns:
      -
        include: '#line-escape'
      -
        include: '#namespace-name'
      -
        include: '#brackets'
  iapp-namespace-entity-commands:
    begin: '\s*\b(delete)\b\s*'
    end: "(?=(?<!\\\\\n)$|(?<!\\\\)\\n|[}\\];{\\[])"
    beginCaptures:
      '1':
        name: keyword.control.name.namespace.eval.iapp
    patterns:
      -
        include: '#variable'
      -
        include: '#line-escape'
      -
        include: '#namespace-name'
      -
        include: '#brackets'
  iapp-namespace-subcommands:
    match: '\s*\b(exists|ensemble|children|code|current|export|forget|import|inscope|origin|parent|path|qualifiers|tail|upvar|unknown|which)\b'
    captures:
      '1':
        name: entity.function.name.namespace.subcommand.iapp
  namespace-name:
    patterns:
      -
        include: '#line-escape'
      -
        include: '#variable'
      -
        include: '#namespace-separator'
      -
        match: "(?![\\s{}\\[\\]])([^\\s:$\\[\\]}{;\\n]+)"
        name: entity.function.name.iapp
  namespace-separator:
    patterns:
      -
        match: '(?<!:)(:)(?!:)|(?<=::)(:)(?!:)'
        name: string
      -
        match: '(::)'
        name: support.type
  iapp-foreach:
    patterns:
      -
        begin: '(?<=^|\[|{|;)\s*(::)?\b(foreach)\b(?:(?=\s+{)\s+)?'
        end: '(?=(?<!\\)$)|(?<=})'
        beginCaptures:
          '1':
            name: support.type
          '2':
            name: keyword.keyword.foreach.loop.iapp
        patterns:
          -
            include: '#arguments-braced'
          -
            include: '#brackets'
          -
            include: '#variable'
          -
            include: '#variable-bare-italic'
  iapp-catch:
    patterns:
      -
        begin: '(?<=\[|{|^)\s*(::)?\b(catch)\b(?=\s)'
        end: "(?=\\]|}|$|(?<!\\\\)\\n|;)"
        beginCaptures:
          '1':
            name: support.type
          '2':
            name: keyword.control.string.iapp
        patterns:
          -
            include: '#brackets'
          -
            include: '#variable-bare-italic'
  iapp-upvar:
    patterns:
      -
        begin: '(?<=\[|\{|^)\s*(::)?\b(upvar)\b'
        end: '\s*(?=\]|}|$|;)'
        beginCaptures:
          '1':
            name: support.type
          '2':
            name: keyword.control.string.iapp
        patterns:
          -
            include: '#line-escape'
          -
            include: '#constant-numeric'
          -
            include: '#variable'
          -
            include: '#variable-bare-italic'
  iapp-info:
    patterns:
      -
        begin: '(?<=\[|\{|^)\s*(::)?\b(info)\b'
        end: "(?=(?<!\\\\)$|[\\n;\\]}])"
        beginCaptures:
          '1':
            name: support.type
          '2':
            name: keyword.control.string.iapp
        patterns:
          -
            include: '#line-escape'
          -
            include: '#square-brackets'
          -
            include: '#iapp-info-exists'
          -
            include: '#iapp-info-subcommands'
  iapp-info-exists:
    patterns:
      -
        begin: \b(exists)\b
        end: "(?=(?<!\\\\)(?:$|[\\n;\\]}]))"
        beginCaptures:
          '1':
            name: entity.function.name.info.exists.iapp
        patterns:
          -
            include: '#variable'
          -
            include: '#line-escape'
          -
            include: '#square-brackets'
          -
            include: '#variable-bare-italic'
  iapp-info-pattern-commands:
    patterns:
      -
        begin: '\b(command(?:s)?|globals|locals|procs|vars|functions)\b'
        end: "\\s*(?=$|\\n|}|\\]|;)"
        captures:
          '1':
            name: entity.function.name.iapp
        patterns:
          -
            include: '#constant-numeric'
          -
            include: '#namespace-name'
          -
            include: '#glob-match'
  iapp-info-subcommands:
    patterns:
      -
        include: '#iapp-info-pattern-commands'
      -
        begin: '\b(level|frame|coroutine|nameofexecutable|nameofexe|args|body|cmdcount|complete|default|hostname|library|loaded|patchlevel|script|sharedlibextension|tclversion)\b\s*'
        end: "\\s*(?=$|\\n|}|\\]|;)"
        captures:
          '1':
            name: entity.function.name.iapp
        patterns:
          -
            include: '#constant-numeric'
          -
            include: '#namespace-name'
          -
            include: '#proc-call-args'
  iapp-string:
    patterns:
      -
        begin: '(?<=^|[\[{;])\s*(::)?\b(string)\b'
        end: "(?=}|\\]|;|$|\\n)"
        beginCaptures:
          '1':
            name: support.type
          '2':
            name: keyword.control.string.iapp
        patterns:
          -
            include: '#iapp-string-is'
          -
            include: '#iapp-string-match'
          -
            include: '#iapp-string-matchfirst'
          -
            include: '#iapp-string-map'
          -
            include: '#iapp-string-subcommands'
          -
            include: '#proc-call-args'
  iapp-string-is:
    patterns:
      -
        match: '\s*\b(is)\b\s+([^\s}\];]*)'
        captures:
          '1':
            name: entity.function.name.string.is.iapp
          '2':
            name: support.type
            patterns:
              -
                include: '#variable'
  iapp-string-match:
    patterns:
      -
        begin: '(?<=string)\s+\b(match)\b'
        end: "(?=$|\\n|\\]|}|;)"
        captures:
          '1':
            name: entity.function.name.string.is.iapp
          '2':
            name: string
        patterns:
          -
            include: '#line-escape'
          -
            include: '#variable'
          -
            include: '#glob-match'
          -
            include: '#curly-string-brackets'
          -
            include: '#square-brackets'
          -
            include: '#constant-numeric'
  iapp-string-matchfirst:
    patterns:
      -
        begin: '\s*\b(matchfirst)\b'
        end: '\s*(?=\]|}|$|;)'
        captures:
          '1':
            name: entity.function.name.string.is.iapp
        patterns:
          -
            include: '#line-escape'
          -
            include: '#curly-string-brackets'
          -
            include: '#constant-numeric'
          -
            include: '#glob-match'
          -
            include: '#variable'
  iapp-string-map:
    patterns:
      -
        begin: '(?<=string)\b\s+(map)\b'
        end: "(?=$|\\n|\\]|}|{|\\[)"
        captures:
          '1':
            name: entity.function.name.string.map.iapp
        patterns:
          -
            include: '#square-brackets'
          -
            include: '#variable'
          -
            begin: '\s*({)'
            end: '\s*(})'
            patterns:
              -
                match: '(?<=[^\\]\\\\)(.)'
                name: string
              -
                match: '([\[\]])'
                name: string
              -
                include: '#quoted-string'
              -
                include: '#curly-string-brackets'
              -
                include: '#bare-string'
  iapp-string-subcommands:
    patterns:
      -
        match: '(?<=string)\b\s+(match|compact|toupper|tolower|bytelength|compare|cat|first|index|is|last|length|map|range|repeat|replace|reverse|totitle|trim|trimleft|trimright|wordend|wordstart|equal)\s+'
        name: entity.function.name.string.subcommands.iapp
  iapp-dict:
    patterns:
      -
        begin: '(?<=^|[\[{;])\s*(::)?\b(dict)\b'
        end: '($)|(?=$|[;\]}])'
        beginCaptures:
          '1':
            name: support.type
          '2':
            name: keyword.control.dict.iapp
        patterns:
          -
            include: '#line-escape'
          -
            include: '#iapp-dict-keywords'
          -
            include: '#iapp-dict-subcommands'
          -
            include: '#proc-call-args'
  property-list-brackets:
    patterns:
      -
        begin: '\s*({)'
        end: '(})'
        patterns:
          -
            include: '#property-list'
  property-list:
    begin: '(?=.)'
    end: '\s|(?=(?<!\\)$|[\]])|(?<=})'
    patterns:
      -
        include: '#empty-brackets'
      -
        include: '#square-brackets'
      -
        include: '#iapp-expression-keywords'
      -
        begin: '([^\s\]]*)\s+({)'
        end: '(})'
        beginCaptures:
          '1':
            name: variable
            patterns:
              -
                include: '#variable'
              -
                include: '#opt'
        patterns:
          -
            include: '#empty-brackets'
          -
            include: '#property-list'
      -
        begin: "\\s*(?!$|\\]|\\\\)([^\\s\\]}{]*)\\s+(?!$|[{\\n])"
        end: '(?=\s|\]|(?<!\\)$)|(?<=})'
        beginCaptures:
          '1':
            name: variable
            patterns:
              -
                include: '#constant-numeric'
              -
                include: '#opt'
              -
                include: '#variable'
        patterns:
          -
            include: '#line-escape'
          -
            include: '#opt'
          -
            include: '#empty-brackets'
          -
            include: '#special-brackets'
          -
            include: '#square-brackets'
          -
            include: '#variable'
          -
            include: '#constant-numeric'
          -
            match: '(?!\s|\])([^\s\]]+)'
            name: string
      -
        include: '#variable'
      -
        include: '#bare-string'
  iapp-commands:
    begin: >
      (?x)
      (?<=\[|\{|^)\s*(
        (?::)?
        script::help
        |script::init
        |script::run
        |script::tabc
        |tmsh::add_help
        |tmsh::add_tabc
        |tmsh::argc
        |tmsh::argv
        |tmsh::begin_transaction
        |tmsh::builtin_help
        |tmsh::builtin_tabc
        |tmsh::cancel_transaction
        |tmsh::clear_screen
        |tmsh::commit_transaction
        |tmsh::create
        |tmsh::csh
        |tmsh::delete
        |tmsh::display_threshold
        |tmsh::display
        |tmsh::get_config
        |tmsh::get_field_names
        |tmsh::get_field_value
        |tmsh::get_name
        |tmsh::get_status
        |tmsh::get_type
        |tmsh::include
        |tmsh::list
        |tmsh::log_dest
        |tmsh::log_level
        |tmsh::log
        |tmsh::modify
        |tmsh::reset_stats
        |tmsh::show
        |tmsh::stateless
        |tmsh::version
        |tmsh::cd
        |tmsh::pwd
        |iapp::template
        |iapp::is
        |iapp::substa
        |iapp::conf
        |iapp::make_safe_password
        |iapp::tmos_version
        |iapp::get_items
        |iapp::destination
        |iapp::pool_members
        |iapp::debug
        |iapp::apm_config
        |iapp::upgrade_template
        |iapp::downgrade_template
        |ag_conf
        |lputs
        |ag_log_kvps
        |ag_log_message
        |start_processing
        |end_processing
        |print_boxed
        |ip_expand
        |ip_max_mask
        |ip_port
        |ip_v
        |ipv4_expand
        |ipv4_to_ipv6
        |ipv6_expand
        |ipv6_to_ipv4
        |is_app_strict
        |is_field_default
        |is_flag
        |is_iapp_strict
        |is_section_prop_default
        |dump_counts
        |dump_locals
        |dump_timings
        |kvps_extra_commands_t1_post
        |kvps_extra_commands_t1
        |kvps_extra_commands_post
        |kvps_extra_commands
        |kvps_modify_presentation
      )
    end: '(?=(?<!\\)$|[\n;\]}])'
    beginCaptures:
      '1':
        name: keyword.control.command
    patterns:
      -
        include: '#empty-brackets'
      -
        include: '#curly-string-brackets'
      -
        include: '#quoted-string'
      -
        include: '#bare-string'
      -
        include: '#proc-call-args'
  proc-arguments:
    patterns:
      -
        include: '#proc-args-braced'
      -
        include: '#proc-args-singular'
  proc-args-singular:
    patterns:
      -
        match: '(?!{|\[|\s|}|\]|$)([^\s}\];]*)(?=\s|}|\])'
        captures:
          '1':
            name: punctuation.definition.variable.iapp
  proc-args-braced:
    begin: '(?={)({)'
    end: '\s*(})'
    beginCaptures:
      '1':
        name: meta.brace.curly.proc.args.open.iapp
    endCaptures:
      '1':
        name: meta.brace.curly.proc.args.close.iapp
    patterns:
      -
        include: '#proc-arguments-nested'
      -
        include: '#variable-bare'
  proc-arguments-nested:
    patterns:
      -
        begin: '\s*+({)'
        end: '(})'
        beginCaptures:
          '1':
            name: entity.function.name
        endCaptures:
          '1':
            name: entity.function.name
        patterns:
          -
            include: '#quoted-string'
          -
            include: '#empty-brackets'
          -
            match: '\s*([^\s|{|}]*)\s*([^\s|{|}]*)(?=\s*?})'
            contentName: variable
            captures:
              '1':
                name: variable
              '2':
                name: string.proc.argument
                patterns:
                  -
                    include: '#constant-numeric'
          -
            include: '#curly-string-brackets'
          -
            match: '\s*([^\s|{|}]*)'
            name: variable.proc.argument
  arguments-braced:
    patterns:
      -
        begin: "({)(?:(?!$|\\n|\\]|}|;|\\[|{)\\s*)?"
        end: '(})'
        patterns:
          -
            match: "(?:(?!$|\\n|\\]|}|;|\\[|{)\\s*)?([^\\s|{|}]*)(?:(?!$|\\n|\\]|}|;|\\[|{)\\s*)?"
            name: variable
  double-dash:
    match: \s(--)\s
    captures:
      '1':
        name: keyword.control.iapp
  quoted-string:
    patterns:
      -
        comment: 'when inside curly bracket, {"}'
        match: '(?<={)\s*+("\s*(?=})(?!"))'
        name: string.quoted.iapp
      -
        begin: '\s*+(?<!\\)(")'
        end: '(?<!\\)(")'
        beginCaptures:
          '1':
            name: string.quoted.double.open.iapp
        endCaptures:
          '1':
            name: string.quoted.double.close.iapp
        patterns:
          -
            include: '#square-brackets'
          -
            include: '#string-content'
          -
            match: '(\*)'
            name: bare.string
          -
            match: '([{}])'
            name: string.quoted.iapp
  string-content:
    patterns:
      -
        include: '#string-escapes'
      -
        include: '#variable'
      -
        include: '#square-brackets'
      -
        include: '#bare-string'
  string-escapes:
    patterns:
      -
        name: constant.character.escape.newline.iapp
        match: "\\\\\\n"
      -
        name: constant.character.escape
        match: '\s*+\\[\]"\\nrtbfv0`\[]'
      -
        name: constant.character.escape
        match: '\\u(({[0-9a-fA-F]+\})|[0-9a-fA-F]{4})'
      -
        name: constant.character.escape
        match: '\\x[0-9a-fA-F]{2}'
      -
        name: constant.character.escape
        match: '(?<!\\)(\\)([;])'
        captures:
          '1':
            name: constant.character.escape
          '2':
            name: string
  bare-string:
    patterns:
      -
        include: '#opt'
      -
        include: '#string-escapes'
      -
        match: "\\s*(\\$)(?=$|\\n|\\]|}|\"|;|\\s)"
        name: bare.string.iapp
      -
        match: '(\\[^\]"\\nrtbfv0`\[])'
        name: bare.string.iapp
      -
        match: "(?<!::)(?!;|\\]|}|\\*|\"|;)([^\\*}\\\\;\\]{\\[\"\\$\\n\\-\\)\\(]+)"
        captures:
          '1':
            name: bare.string.iapp
            patterns:
              -
                match: '(?:(?<=::)|(?=[^\s:]*(?=::)))(?!\s)([^\s]*)'
                captures:
                  '1':
                    patterns:
                      -
                        include: '#namespace-name'
              -
                include: '#variable'
      -
        match: '(-)(?=\s|;|}|\]|"|-)'
        name: bare.string.iapp
      -
        match: '(?<=-)(-)'
        name: bare.string.iapp
      -
        include: '#variable'
  html-curly-brackets:
    begin: '\s*({)'
    end: '(})'
    patterns:
      -
        include: text.html.basic
  regexp:
    patterns:
      -
        begin: '(?<=^|\[|{|;)\s*(::)?\b(regexp|regsub)\b'
        end: "(?=(?<!\\\\)(?:$|[\\n;}\\]]))"
        beginCaptures:
          '1':
            name: support.type.ns.separator.iapp
          '2':
            name: keyword.control.regexp.iapp
        patterns:
          -
            include: '#line-escape'
          -
            include: '#double-dash'
          -
            include: '#quoted-string'
          -
            match: '\s*(->)'
            name: meta.constant.re.trashvar.iapp
          -
            include: '#opt'
          -
            begin: '\s*({|")'
            end: "(}|\")(?=\\s+(?:\\\\\n|$|\\n|\\[|\\$|\\b|\"|;|}|-))"
            contentName: string.iapp
            patterns:
              -
                include: '#regular-expression'
          -
            include: '#quoted-string'
          -
            include: '#variable'
          -
            include: '#variable-bare-italic'
      -
        begin: '(?<=_regexp|_re)\s+(?={|")'
        end: '(?=(?<!\\)$)|(?<=")|(?<=})'
        patterns:
          -
            begin: '({)'
            end: '(})'
            contentName: string.iapp
            patterns:
              -
                include: '#regular-expression'
          -
            begin: '(")'
            end: '(")'
            contentName: string.iapp
            patterns:
              -
                include: '#regular-expression'
  comment-blocks:
    patterns:
      -
        contentName: comment.line.number-sign.iapp
        begin: '(?<=^|;|{)\s*((#))'
        end: "(?=$|\\n)|((#))(?=\\s*(?:[}\\n]))"
        captures:
          '1':
            name: comment.line.number-sign.iapp
          '2':
            name: punctuation.definition.comment.iapp
      -
        contentName: comment.block.iapp
        begin: '(?<=^|;|\{)\s*((?:\%\s+\{)|(?:\bif\s+{?0}?\s+{))'
        end: '\s*(\})'
        beginCaptures:
          '1':
            name: comment.block.multi.start.iapp
          '2':
            name: punctuation.definition.comment.iapp
        endCaptures:
          '1':
            name: comment.block.multi.end.iapp
        patterns:
          -
            include: '#annotate'
          -
            include: '#variable-non-substituting'
  annotate:
    patterns:
      -
        include: '#annotate-control-block'
      -
        include: '#annotate-properties'
      -
        include: '#annotate-title'
      -
        include: '#annotate-header'
      -
        include: '#annotate-highlight'
      -
        include: '#annotate-type'
      -
        include: '#annotate-list'
  annotate-title:
    patterns:
      -
        comment: 'adding @ in a multi-line will make the line emphasized'
        contentName: meta.class.comment.annotate.iapp
        begin: '\s*+(@)'
        end: "(?={|\\s-|>)|(@|}|$|\\n)|\\|"
        beginCaptures:
          '1':
            name: support.type.annotate.iapp
        endCaptures:
          '1':
            name: support.type.annotate.iapp
        patterns:
          -
            include: '#variable-non-substituting'
          -
            include: '#namespace-separator'
  annotate-properties:
    begin: "(?=\\s*@[^\\s\\n])"
    end: "(?=$|[\\n}@])"
    patterns:
      -
        comment: 'special @ values that are meant as property values'
        match: '\s*+(@)\b(type)\b(\s+[^{}|@\[<>-]*)?'
        captures:
          '1':
            name: meta.constant.annotate.property.iapp
          '2':
            name: support.type.name.iapp
          '3':
            name: entity.function.property.name.iapp
      -
        comment: 'special @ values that are meant as property values'
        match: '\s*+(@)\b(arg(?:s)?|returns|key|prop|if|example|param|params|opt|option|argument|val|value)\b(\s+[^\/{}|@\[<>]*)?'
        captures:
          '1':
            name: support.type.annotate.property.iapp
          '2':
            name: variable.property.name.iapp
          '3':
            name: support.type
            patterns:
              -
                include: '#opt'
      -
        comment: '@<other> (no space after @)'
        match: '\s*+(@)\b([^\s]*)\b(\s+[^\/{}|@\[<>-]*)?'
        captures:
          '1':
            name: meta.constant.annotate.property.iapp
          '2':
            name: entity.function.property.name.iapp
          '3':
            name: support.type.iapp
      -
        include: '#annotate'
  annotate-control-block:
    patterns:
      -
        comment: 'bracketed within a comment'
        contentName: keyword.operator
        begin: '^\s*+(?={)'
        end: '(?<=})'
        patterns:
          -
            include: '#brackets'
  annotate-proc-call:
    patterns:
      -
        begin: '(\[)'
        end: '(\])'
        beginCaptures:
          '1':
            name: support.type.annotate.proc-call.iapp
        endCaptures:
          '1':
            name: support.type.annotate.proc-call.iapp
        patterns:
          -
            include: '#proc-call'
  annotate-type:
    patterns:
      -
        comment: 'adding @ in a multi-line will make the line emphasized'
        contentName: entity.function.name.comment.annotate.iapp
        begin: '\s*+({)'
        end: '\s*(})'
        beginCaptures:
          '1':
            name: meta.constant.comment.annotate.iapp
        endCaptures:
          '1':
            name: meta.constant.comment.annotate.iapp
        patterns:
          -
            include: '#annotate-regular-expression'
          -
            include: '#annotate-proc-call'
          -
            begin: (<)
            end: '(>)|(?=[}])'
            contentName: support.type.comment.annotate.property.punctuation.italic.iapp
            patterns:
              -
                include: '#annotate-regular-expression'
              -
                match: (\|)
                name: entity.function.name.iapp
              -
                include: '#variable-non-substituting'
              -
                match: '([,])'
                name: entity.function.name.annotate.opt.iapp
              -
                match: '([-])'
                name: meta.constant.annotate.opt.iapp
          -
            match: '(?:(?<={|\|)([?*])|([?*])(?=}|\|))'
            name: variable.modifier.annotate.punctuation.italic.iapp
          -
            match: (\|)
            name: meta.constant.comment.annotate.iapp
  annotate-regular-expression:
    patterns:
      -
        begin: (/)
        end: (/|$)
        beginCaptures:
          '1':
            name: support.type.annotate.re.brace.open.iapp
        endCaptures:
          '1':
            name: support.type.annotate.re.brace.close.iapp
        contentName: string.re.expression.comment.annotate.contents.iapp
        patterns:
          -
            include: '#regular-expression'
  annotate-highlight:
    patterns:
      -
        comment: 'adding | in a multi-line will make the line highlighted (string)'
        match: '(?<=\|)\s*([^|]*)'
        captures:
          '1':
            name: string.quote.annotate.comment.iapp
            patterns:
              -
                include: '#annotate-type'
              -
                include: '#annotate-proc-call'
              -
                include: '#variable-non-substituting'
              -
                match: '\b(http://([^\s]*))'
                name: entity.function.name.markup.underline
  annotate-header:
    patterns:
      -
        comment: 'adding > in a multi-line will make the line emphasized'
        begin: '\s*+(>)'
        end: '(<)|(?=$|>)'
        contentName: meta.constant.annotate.header.iapp
        captures:
          '1':
            name: entity.function.name.annotate.iapp
          '2':
            name: meta.constant.annotate.header.iapp
        patterns:
          -
            include: '#annotate'
  annotate-list:
    patterns:
      -
        match: '^\s*([0-9]\.)\s+'
        name: meta.class
  opt:
    patterns:
      -
        comment: 'Handle options sent to commands at various points (cmd -name1 value -name2 value)'
        match: "\\s*+(?<=\\s|^|\"|\\()((-)(?!-|\\s|\"|;|\\n|>)[^\\s$\\n\\[\\];\"{)(}]*)"
        captures:
          '1':
            name: support.type.opt.iapp
          '2':
            name: meta.constant.opt.start.iapp
  line-escape:
    begin: "\\s*+(\\\\\\n)$"
    end: '(^)(?:\s*(?!$))?'
    beginCaptures:
      '1':
        name: constant.character.escape.newline.iapp
    endCaptures:
      '1':
        name: meta.lineescape.highlight.iapp
  glob-match:
    patterns:
      -
        begin: '({)'
        end: '(})'
        patterns:
          -
            include: '#glob-match'
      -
        match: '\s*+(\*)'
        name: meta.class
      -
        include: '#string-escapes'
      -
        begin: '(?<!\\)(")'
        end: '(?<!\\)(")'
        beginCaptures:
          '1':
            name: string.double.quoted.glob.match.open.iapp
        endCaptures:
          '1':
            name: string.double.quoted.glob.match.close.iapp
        patterns:
          -
            include: '#glob-match'
      -
        begin: '(?<!\\)(\[)'
        end: '(?<!\\)(\])'
        contentName: support.type
        beginCaptures:
          '1':
            name: meta.class
        endCaptures:
          '1':
            name: meta.class
      -
        include: '#square-brackets'
      -
        include: '#bare-string'
  variable-bare-italic:
    patterns:
      -
        begin: "\\s*(?!$|[$\\[;\\n{])"
        end: "(?=(?<!\\\\)$|[\\n\\];\\[{}\\s])"
        patterns:
          -
            include: '#quoted-string'
          -
            include: '#variable'
          -
            include: '#brackets'
          -
            begin: '\s*(\()'
            end: (\))
            contentName: punctuation.italic
            beginCaptures:
              '1':
                name: entity.function.name.array.open.iapp
            endCaptures:
              '1':
                name: entity.function.name.array.close.iapp
            patterns:
              -
                include: '#opt'
              -
                include: '#proc-call-args'
          -
            include: '#namespace-separator'
          -
            match: '(?!\s)([^\s\[(?:::){;\$"\]};]*)'
            name: punctuation.italic.variable
          -
            match: '(?<=\*)(?!\s)([^\s\[(?:::){;$"\];}]*)'
            name: punctuation.italic.variable
  variable-bare:
    patterns:
      -
        begin: "(?<=\\s|^|\\*|{)\\s*(?!$|[$\\n;}{\\]\\[])"
        end: "(?=(?<!\\\\)$|[\\n\\];\\[{}]|(?=\\s))"
        patterns:
          -
            include: '#variable'
          -
            include: '#quoted-string'
          -
            begin: (\()
            end: (\))
            contentName: punctuation.italic
            beginCaptures:
              '1':
                name: entity.function.name.array.open.iapp
            endCaptures:
              '1':
                name: entity.function.name.array.close.iapp
            patterns:
              -
                include: '#opt'
              -
                include: '#proc-call-args'
          -
            include: '#namespace-separator'
          -
            match: '([,])'
            name: variable
          -
            match: '(?!(?<!\\)$|\[|\])([^:\s}\]\[\({",;$]*)'
            name: variable
          -
            match: '(?<=\*)(?!\s|$|\[|\])([^:\s}\[{\]",;]*)'
            name: variable
          -
            match: '(:)'
            name: string
          -
            include: '#proc-call-args'
      -
        include: '#variable'
  variable-braced:
    patterns:
      -
        begin: '(?={)({)'
        end: '(}|\s)'
        patterns:
          -
            include: '#variable-bare'
  variable:
    patterns:
      -
        match: "^\\s*(\\$)\\s*(?=\\n|$|\\]|})"
        name: support.type
      -
        match: "\\s*(?:(?![\\]\\n\"};])|(?=[$]))(?<!(?<!\\\\)\\\\)(\\$)(?:({)([^}\\s\\]\"\\)\\(\\$]*)(\\([^\\(\\)]*\\))?(})([^\\s\\[\\];\\n\"{}]*)?|(?=[A-Za-z0-9_:])([^\\s\\*\\[}\\]/\"\\);\\(\\\\$,\\-\\+'\\*]*)(\\([^\\s\\['\\\\;}\\]\")($,+*]*\\))?)"
        captures:
          '1':
            name: support.type.variable.indicator.iapp
          '2':
            name: entity.function.name.variable.brace.open.iapp
          '3':
            patterns:
              -
                include: '#namespace-separator'
              -
                include: '#variable'
              -
                match: '([^\s:"}{]+)'
                name: variable.name
          '4':
            patterns:
              -
                begin: (\()
                end: (\))
                contentName: punctuation.italic
                beginCaptures:
                  '1':
                    name: support.type
                endCaptures:
                  '1':
                    name: support.type
                patterns:
                  -
                    include: '#opt'
                  -
                    include: '#proc-call-args'
          '5':
            name: entity.function.name.variable.brace.close.iapp
          '6':
            patterns:
              -
                include: '#proc-call-args'
              -
                include: '#bare-string'
          '7':
            patterns:
              -
                include: '#namespace-separator'
              -
                match: '([^\s:"}{\\\]\[]+)'
                name: variable.name
          '8':
            patterns:
              -
                begin: (\()
                end: (\))
                contentName: punctuation.italic
                beginCaptures:
                  '1':
                    name: entity.function.name.iapp
                endCaptures:
                  '1':
                    name: entity.function.name.iapp
                patterns:
                  -
                    include: '#opt'
                  -
                    include: '#proc-call-args'
  variable-non-substituting:
    patterns:
      -
        match: "^\\s*+(\\$)\\s*(?=\\n|$)"
        name: support.type
      -
        match: "\\s*+(?:(?!\\]|\\n|\"|>|<|,))(?<!(?<!\\\\)\\\\)(\\$)(?:({)([^}\\s\\]\"\\)\\(\\$]*)(\\(.*\\))?(})|(?=[A-Za-z0-9_:])([^\\s\\,<>\\*}\\]/\"\\);\\(\\\\\\$,\\-\\+\\*]*)(\\([^\\s\\\\;\\*}\\]\"\\)\\(\\$,\\-\\+\\*<>]*\\))?)"
        captures:
          '1':
            name: support.type.variable.indicator.iapp
          '2':
            name: entity.function.name.variable.brace.open.iapp
          '3':
            patterns:
              -
                include: '#namespace-separator'
              -
                include: '#variable'
              -
                match: '([^\s:"}{]+)'
                name: meta.constant.iapp
          '4':
            patterns:
              -
                begin: (\()
                end: (\))
                contentName: punctuation.italic.meta.constant
                beginCaptures:
                  '1':
                    name: support.type
                endCaptures:
                  '1':
                    name: support.type
                patterns:
                  -
                    include: '#proc-call-args'
          '5':
            name: entity.function.name.variable.brace.close.iapp
          '6':
            patterns:
              -
                include: '#namespace-separator'
              -
                match: '([^\s:"}{\\\]\[]+)'
                name: meta.constant
          '7':
            patterns:
              -
                begin: (\()
                end: (\))
                contentName: punctuation.italic.meta.constant
                beginCaptures:
                  '1':
                    name: entity.function.name
                endCaptures:
                  '1':
                    name: entity.function.name
                patterns:
                  -
                    include: '#proc-call-args'
